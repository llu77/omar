
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check for authentication
    function isAuthenticated() {
      return request.auth != null;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Any authenticated user can read user profiles (for searching)
      allow read: if isAuthenticated();
      // A user can create their own profile
      allow create: if isAuthenticated() && request.auth.uid == userId;
      // A user can only update their own profile (e.g., for presence status)
      allow update: if isAuthenticated() && request.auth.uid == userId;
    }

    // Rules for the 'reports' collection
    match /reports/{reportId} {
      // To enable collaboration, allow any authenticated user to create and read reports.
      // In a production app with stricter privacy, you might restrict reads
      // to the ownerId or a list of shared users.
      allow read, create: if isAuthenticated();
      // Only the owner can update or delete their reports
      allow update, delete: if isAuthenticated() && request.auth.uid == resource.data.ownerId;
    }
    
    // Rules for the 'goals' collection
    match /goals/{goalId} {
        // Allow any authenticated user to read and create goals for collaboration
        allow read, create: if isAuthenticated();
        // Allow updates and deletes for now by any authenticated user.
        // In a real-world scenario, you might restrict this to team members or creators.
        allow update, delete: if isAuthenticated();
    }

    // Rules for the 'channels' collection and their subcollections
    match /channels/{channelId} {
      // Allow read, update, delete only if the user is a participant in the channel
      allow read, update, delete: if isAuthenticated() && request.auth.uid in resource.data.participants;
      
      // Allow create only if the creating user is in the participants list
      allow create: if isAuthenticated() && request.auth.uid in request.resource.data.participants;

      // Rules for the 'messages' subcollection
      match /messages/{messageId} {
        // Allow read if the user is a participant of the parent channel
        allow read: if isAuthenticated() && get(/databases/$(database)/documents/channels/$(channelId)).data.participants.hasAny([request.auth.uid]);
        
        // Allow create if the user is the sender and is a participant of the parent channel
        allow create: if isAuthenticated() 
                      && request.auth.uid == request.resource.data.senderId
                      && get(/databases/$(database)/documents/channels/$(channelId)).data.participants.hasAny([request.auth.uid]);
      }
    }
  }
}
